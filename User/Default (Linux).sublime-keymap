[
	{ "keys": ["ctrl+n"], "command": "advanced_new_file_new"},
	{ "keys": ["ctrl+alt+n"], "command": "new_file" },

	{ "keys": ["ctrl+d"], "command": "duplicate_line" },
	{ "keys": ["ctrl+y"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"} },

	{ "keys": ["ctrl+shift+o"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true} },

    { "keys": ["ctrl+pagedown"], "command": "next_view_in_stack" },
    { "keys": ["ctrl+pageup"], "command": "prev_view_in_stack" },

    { "keys": ["ctrl+tab"], "command": "next_view" },
    { "keys": ["ctrl+shift+tab"], "command": "prev_view" },

    { "keys": ["ctrl+shift+w"], "command": "close_other_tabs" },

    { "keys": ["ctrl+shift+i"], "command": "simple_require" },
    { "keys": ["ctrl+shift+e"], "command": "export_require" },
    { "keys": ["alt+enter"], "command": "require_from_word" },

    { "keys": ["alt+1"], "command": "toggle_side_bar" },

    { "keys": ["alt+delete"], "command": "advanced_new_file_delete" },
    { "keys": ["alt+shift+delete"], "command": "advanced_new_file_delete", "args": {"current": true} },
    { "keys": ["alt+m"], "command": "advanced_new_file_move" },

    // switch default paste behaviour
    { "keys": ["ctrl+v"], "command": "paste_and_indent" },
    { "keys": ["ctrl+shift+v"], "command": "paste" },

    // replace default with subwords
    { "keys": ["ctrl+left"], "command": "move", "args": {"by": "subwords", "forward": false} },
    { "keys": ["ctrl+right"], "command": "move", "args": {"by": "subword_ends", "forward": true} },
    { "keys": ["ctrl+shift+left"], "command": "move", "args": {"by": "subwords", "forward": false, "extend": true} },
    { "keys": ["ctrl+shift+right"], "command": "move", "args": {"by": "subword_ends", "forward": true, "extend": true} },

    // origami (to match byobu)
    { "keys": ["alt+up"], "command": "travel_to_pane", "args": {"direction": "up"} },
    { "keys": ["alt+right"], "command": "travel_to_pane", "args": {"direction": "right"} },
    { "keys": ["alt+down"], "command": "travel_to_pane", "args": {"direction": "down"} },
    { "keys": ["alt+left"], "command": "travel_to_pane", "args": {"direction": "left"} },
    
    { "keys": ["ctrl+f2"], "command": "create_pane", "args": {"direction": "right", "give_focus": true} },
    { "keys": ["shift+f2"], "command": "create_pane", "args": {"direction": "down", "give_focus": true} },

    { "keys": ["alt+shift+up"], "command": "carry_file_to_pane", "args": {"direction": "up"} },
    { "keys": ["alt+shift+right"], "command": "carry_file_to_pane", "args": {"direction": "right"} },
    { "keys": ["alt+shift+down"], "command": "carry_file_to_pane", "args": {"direction": "down"} },
    { "keys": ["alt+shift+left"], "command": "carry_file_to_pane", "args": {"direction": "left"} },

    // split to multiple carets
    { "keys": ["ctrl+up"], "command": "select_lines", "args": {"forward": false} },
    { "keys": ["ctrl+down"], "command": "select_lines", "args": {"forward": true} },

    { "keys": ["ctrl+a"], "command": "find_all", "args": {"close_panel": true},
        "context": [{"key": "panel", "operand": "find"}, {"key": "panel_has_focus"}]
    },
    { "keys": ["ctrl+r"], "command": "show_panel", "args": {"panel": "replace", "reverse": false} },
    { "keys": ["ctrl+shift+r"], "command": "slurp_replace_string" },
    // replace by default - f3 to skip
    { "keys": ["enter"], "command": "replace_next", "context":
        [{"key": "panel", "operand": "replace"}, {"key": "panel_has_focus"}]
    },
    { "keys": ["ctrl+k", "ctrl+f"],
      "command": "chain",
      "args": {
        "commands": [
          ["show_panel", {"panel": "find", "reverse": false, "focus": false}],
          ["find_under_expand_skip"],
        ]
      },
    },
    { "keys": ["ctrl+alt+a"],
      "command": "chain",
      "args": {
        "commands": [
          ["find_under_expand"],
          ["find_all"]
        ]
      },
    },
    { "keys": ["ctrl+alt+f"], "command": "find_under_expand_skip" },

    // override MarkdownEditing default
    { "keys": ["shift+tab"], "command": "unindent", "context":
        [
            { "key": "setting.shift_tab_unindent", "operator": "equal", "operand": true }
        ]
    },
    // Bold on Ctrl + B
    { "keys": ["ctrl+b"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Bold.sublime-macro"}, "context":
        [
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
        ]
    },
    { "keys": ["ctrl+b"], "command": "insert_snippet", "args": {"contents": "${MD_BOLD_MARKER}$1${MD_BOLD_MARKER}"}, "context":
     [
         { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
         { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
         { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true },
         { "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
         { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
         { "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
     ]
    },
    { "keys": ["ctrl+b"], "command": "insert_snippet", "args": {"contents": "${MD_BOLD_MARKER}${SELECTION/(^[\\*_]*|[\\*_]*$)//g}${MD_BOLD_MARKER}"}, "context":
        [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
        ]
    },
    // Italicize on Ctrl + I
    { "keys": ["ctrl+i"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Italic.sublime-macro"}, "context":
        [
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
        ]
    },
    { "keys": ["ctrl+i"], "command": "insert_snippet", "args": {"contents": "${MD_ITALIC_MARKER}$0${MD_ITALIC_MARKER}"}, "context":
     [
         { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
         { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
         { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true },
         { "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
         { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
         { "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
     ]
    },
    { "keys": ["ctrl+i"], "command": "insert_snippet", "args": {"contents": "${MD_ITALIC_MARKER}${SELECTION/(^[\\*_]*|[\\*_]*$)//g}${MD_ITALIC_MARKER}"}, "context":
        [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
        ]
    },

    // Unbold on Ctrl + B if already bold
    { "keys": ["ctrl+b"], "command": "insert_snippet", "args": {"contents": "${SELECTION/(^[\\*_]{2}|[\\*_]{2}$)//g}"}, "context":
        [
            { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
            { "key": "text", "operator": "regex_match", "operand": "^[*_]{2}.*[*_]{2}$", "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
        ]
    },
    { "keys": ["ctrl+b"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Unbold Unitalicize.sublime-macro"}, "context":
        [
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown markup.bold.markdown", "match_all": true }
        ]
    },
    { "keys": ["ctrl+b"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Unbold Unitalicize.sublime-macro"}, "context":
        [
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "\\b__+\\S+__+$", "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
        ]
    },

    // Unitalicize on Ctrl + I if already italic
    { "keys": ["ctrl+i"], "command": "insert_snippet", "args": {"contents": "${SELECTION/(^[\\*_]|[\\*_]$)//g}"}, "context":
        [
            { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
            { "key": "text", "operator": "regex_match", "operand": "^[*_].*[*_]$", "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
        ]
    },
    { "keys": ["ctrl+i"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Unbold Unitalicize.sublime-macro"}, "context":
        [
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown markup.italic.markdown", "match_all": true }
        ]
    },
    { "keys": ["ctrl+i"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Unbold Unitalicize.sublime-macro"}, "context":
        [
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "\\b_(?!_)\\S+_$", "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
        ]
    },

    // tern
    { "keys": ["f12"], "command": "tern_jump_to_def",
      "context": [
        {"key": "selector", "operand": "source.js"}
      ]
    },

    { "keys": ["ctrl+shift+a"], "command": "expand_selection", "args": {"to": "tag"} },
    { "keys": ["ctrl+shift+space"], "command": "expand_region" },

    { "keys": ["ctrl+shift+alt+n"], "command": "new_snippet" },
]
